name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  # app
  APP_PORT: 80
  APP_ENV: 'development'
  APP_URL: 'localhost'

  # redis
  REDIS_HOST: 'redis'
  REDIS_PORT: 6379
  REDIS_PASSWORD: 'password'

  # database
  DB_PORT: 5432
  DB_HOST: 'postgres'
  DB_USERNAME: 'username'
  DB_PASSWORD: 'password'
  DB_DATABASE: 'database'

  # email
  EMAIL_HOST: 'mailhot'
  EMAIL_PORT: 1025
  EMAIL_ALIAS: 'mail@jaw.dev'
  EMAIL_AUTH_EMAIL: 'name@email.com'
  EMAIL_AUTH_PASS: 'password'

  # twilio
  TWILIO_ACCOUNT_SID: ''
  TWILIO_AUTH_TOKEN: ''
  TWILIO_FROM_PHONE_NUMBER: ''
  TWILIO_PHONE_NUMBER: ''

jobs:
  unit-test:
    name: Unit tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Create .env file from .env.example
        run: cp .env.example .env

      - name: Install dependencies
        run: npm i

      - name: Test codes
        run: npm run test:coverage

  browser-test:
    timeout-minutes: 60
    name: Browser tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  lint:
    name: ESLint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm i

      - name: Lint codes
        run: npm run lint

  format:
    needs: [lint, unit-test, browser-test]
    name: Prettier format
    runs-on: ubuntu-latest

    permissions:
      contents: write

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm i

      - name: Format codes
        run: npm run format

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'style: format codes'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: [unit-test, browser-test, lint, format]
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://notify.jaw.dev/

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Preset Image Name
        run: echo "IMAGE_URL=$(echo ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:$(echo ${{ github.sha }} | cut -c1-7) | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ env.IMAGE_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy Image to Server
        uses: caprover/deploy-from-github@v1.1.2
        with:
          server: '${{ secrets.CAPROVER_SERVER }}'
          app: '${{ secrets.APP_NAME }}'
          token: '${{ secrets.APP_TOKEN }}'
          image: ${{ env.IMAGE_URL }}
